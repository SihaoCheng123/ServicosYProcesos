EJercicio 1

Crear dos hilos en JAVA. EL primer hilo debe contar del 1 al 5.
El segundo hilo debe contar de 6 a 10.
Ambos hilos deben de hacer una pausa de 1s entre cada num y
mostrar el num que está imprimiento


Ejercicio 2

Crear un programa en Java con dos hilos que compartan una misma variable entera(Contador)
Un hilo debe incrementar el contador y el otro debe decrementarlo.
Usa synchronized para resolverlo.


Ejercicio 3

Crear un programa con dos hilos que deben imprimir una secuencia de numeros de manera alternad.
El hilo 1 debe imprimir nº impares y el hilo 2 debe imprimir nº pares,
asegurandose de que los n se impriman en el orden correcto. Hay que usar notify() y wait().


Para casa:

EJER1
Crea un programa que simule la entrada y salida de vehículos de un estacionamiento con capacidad limitada.
Un nº de hilos simularán los vehiculso que intentan entrar en el estacionamiento.
SI está lleno, los vehículos deben esperar hasta que otro vehiculo salga
(Se han de usar de 2 a 3 hilos)

EJER2
Imagina un puente estrecho por donde solo puede pasar un carro a la vez.
Crea un programa donde dos tipos de carros(ejemplo: del norte y del sur) intentan cruzar el puente.
El del norte debe esperar si un carro del sur está cruzando el puente y viceversa
(Se usan 4 hilos; 2 para el norte y 2 para el sur)

EJER3**

Crea un programa que simule un ascensor con una capacidad limitada de personas.
Si el ascensor está lleno, las personas debem esperar hasta que haya espacio disponible para entrar


EJER 4

Imagina una carrera en la que los corredores (hilos) deben esperar hasta que el juez dé la señal de inicio(hilo principal).
Los corredores solo pueden empezar cuando el juez los despierte utilizando notifyAll()

EJER5**
Simula una situacion donde varios hilos deben esperar en una barrera hasta que todos los hilos hayan alcanzado ese punto.
Solo cuando todos los hilos hayan llegado a la barrera, todos pueden continuar al mismo tiempo
(usar notifyAll())

EJER6**
Imagina que tienes varios trabajadores en una fábrica. Todos estan esperando a que se complete una tarea inicial
(por ej, que llegue un material ), y una vez que esté listo, todos los trabajadores pueden empezar a trabajar
de forma simultanea (usar notifyAll)

